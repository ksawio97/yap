generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String   @default(cuid()) @id
  content   String   @db.VarChar(4000)
  published DateTime @default(now())
  likes     Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  parentId String? @map("parent_id")
  parent Post? @relation("PostReplies", fields: [parentId], references: [id])
  replies Post[] @relation("PostReplies")

  @@map("posts")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String   @unique
  bio           String    @default("") @db.VarChar(200)
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  emailVerifToken String?   @db.VarChar(255)
  image         String?
  password      String

  passwordResetToken PasswordResetToken? @relation("UserToPasswordResetToken")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}

model PasswordResetToken {
  id String @id @default(cuid())
  token String?   @db.VarChar(255)
  expirationDate DateTime? @map("expiration_date")

  user User @relation("UserToPasswordResetToken", fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @unique

  @@map("password_reset_tokens")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}